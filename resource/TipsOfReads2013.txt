#########################################################################################################
1. Head first设计模式
------------------------
Tuesday, April 16, 2013 

p8	
委托模式，将一些变化的部分抽取出来，定义成接口并实现，引用到这些变化的类通过接口引用。面向接口和抽象编程
在运行时通过set方法动态设定接口的实现，从而可以动态变化

p53&67
观察者模式 - 交互对象之间的松耦合设计

在对象间定义一对多的依赖关系

主题不关心观察者的动作，只需通知它即可；双方的修改互不耦合，都面向接口编程
松耦合的设计建立有弹性的OO系统，能够应对变化，是因为对象间的互相依赖降到了最低

JDK对观察者模式的支持，Observer，Observable并可自定义拉pull或推push（具体是只把可观察对象传递给观察者，如果关心则自己拉去；
还是把可观察者及其数据一起给观察者，不论观察者是否关心都推过去）；缺点：Observable是一个类而不是接口，违反了多用组合少用集成的设计
原则，毕竟java不支持多重继承


有多个观察者时，不可以依赖特定的通知次序

swing中也大量使用观察者模式

------------------------
Wednesday, April 17, 2013

p59&74
第二章总结

OO基础：抽象
OO原则：
	封装变化
	多用组合，少用继承
	针对接口编程，不针对实现编程
	为交互对象间的松耦合而努力

p64&79
装饰器模式	Decorator	 Decoration

PS:
	看一个apache类的说明：
	org.apache.commons.collections.collection.AbstractCollectionDecorator

	Decorates another Collection to provide additional behaviour. 

	Each method call made on this Collection is forwarded to the decorated Collection. This class is used as a framework on which to build to extensions such as synchronized 
	and unmodifiable behaviour. The main advantage of decoration is that one decorator can wrap any implementation of Collection, whereas sub-classing requires a new class 
	to be written for each implementation. 

	This implementation does not perform any special processing with iterator(). Instead it simply returns the value from the wrapped collection. This may be undesirable, for example 
	if you are trying to write an unmodifiable implementation it might provide a loophole.

	public abstract class AbstractCollectionDecorator implements Collection {

	继承这个抽象类，并对被装饰的对象的方法外层再做包装以实现组合的方式扩展类的功能（比如同步集合、不可修改的集合类等）；
	注：优点是，一个Collection接口的decorator可以装饰此接口的多个实现类，而通过继承的话需要为每个实现类写一个子类来达到装饰的目的。	       -tip-

p71&86

开放-关闭原则
设计原则：
	类应该对扩展开放，对修改关闭

装饰器模式，完全遵循开放-关闭原则

设计的每个部分都遵循开放-关闭原则？
你办不到。要让OO设计同时具备开放性和关闭性，又不修改现有的代码，需要花费许多时间和努力。一般来说，我们实在没有闲工夫把设计的每
个部分都这么设计（而且，就算做得到，也可能只是一种浪费）。遵循开放-关闭原则，通常会引入新的抽象层次，增加代码
的复杂度。你需要把注意力集中在设计中最有可能改变的地方，然后应用开放-关闭原则。

p73&87
装饰器模式
	
	模式说明：装饰者模式动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。

	- 装饰者和被装饰对象有相同的超类型
	- 可以用一个或多个装饰者包装一个对象
	- 因为装饰者和被装饰者有相同的超类型（接口或抽象类），所以在任何需要原始对象（被包装的）的场合，	可以用装饰过的对象代替它
	- 装饰者可以在委托被装饰者的行为之前与/或之后，加上自己的行为，以达到特定的目的
	- 对象可以在任何时候被装饰，所以可以在运行时动态地、不限量的用你喜欢的裝饰者来装饰对象

	比如双份咖啡，装饰器再装饰一次即可。

	有更好的方式建立被装饰者对象，装饰者通常是用其他类似于工厂或生成器这样的模式创建的。

	java.io包内多种流的设计就是用到了装饰器模式，比如在基础对象FileInputStream外面有Buffer额定InputStream等装饰类提供辅助功能
	BufferedInputStream及LineNumberInputStream都扩展自FilterInputStream，而FilterInputStream是一个抽象的装饰类(貌似是类，而非抽象类)。

	java.io.FilterInputStream
		DOC
		A FilterInputStream contains some other input stream, which it uses as its basic source of data, possibly transforming the data along the way or 
		providing additional functionality. The class FilterInputStream itself simply overrides all methods of InputStream with versions that pass all requests 
		to the contained input stream. Subclasses of FilterInputStream may further override some of these methods and may also provide additional methods
		and fields.

	chunked输出，可以使用此模式，继承自DataOutputStream或者FilterOutputStream，以chunk为单位输出。

------------------------
Thursday, April 25, 2013
p73&88
认识装饰者模式
	够了！你们这些“面向对象
	设计俱乐部”的家伙。快来解决真
	正的问题吧！还记得我们吗？星巴
	兹咖啡？你认为这些设计原则有实
	质的帮助吗？
	好了，我们已经了解利用继承无法完全解决问题，在星巴兹遇到的问
	题有：类数量爆炸、设计死板，以及基类加入的新功能并不适用于所
	有的子类。
	所以，在这里要采用不一样的做法：我们要以饮料为主体，然后在运
	行时以调料来“装饰”（decorate）饮料。

装饰器模式与代理模式的区别
	装饰器模式关注于在一个对象上动态的添加方法，然而代理模式关注于控制对对象的访问。换句话 说，用代理模式，代理类（proxy class）
	可以对它的客户隐藏一个对象的具体信息。因此，当使用代理模式的时候，我们常常在一个代理类中创建一个对象的实例。并且，当我们使用装饰器模 式的时候，
	我们通常的做法是将原始对象作为一个参数传给装饰者的构造器。

        我们可以用另外一句话来总结这些差别：使用代理模式，代理和真实对象之间的的关系通常在编译时就已经确定了，而装饰者能够在运行时递归地被构造。  
	from: http://www.cnblogs.com/jaredlam/archive/2011/11/08/2241089.html

------------------------
Friday, April 26, 2013
p90&104
装饰器模式的注意点：
	采用装饰者在实例化组件时，将增加代码的复杂度。一旦使用装饰者模式，不只需要实例化组件，还要把此组件包装进装饰者。工厂（Factory）模式和生成器（Builder）模式，
	对这个问题有很大的帮助

第三章总结
	¸ 继承属于扩展形式之一，但不见得是达到弹性设计的最佳方式。
	¸ 在我们的设计中，应该允许行为可以被扩展，而无须修改现有的代码。
	¸ 组合和委托可用于在运行时动态地加上新的行为。
	¸ 除了继承，装饰者模式也可以让我们扩展行为。
	¸ 装饰者模式意味着一群装饰者类， 这些类用来包装具体组件。
	¸ 装饰者类反映出被装饰的组件类型（事实上，他们具有相同的类型，都经过接口或继承实现）。
	¸ 装饰者可以在被装饰者的行为前面与/或后面加上自己的行为， 甚至将被装饰者的行为整个取代掉，而达到特定的目的。
	¸ 你可以用无数个装饰者包装一个组件。
	¸ 装饰者一般对组件的客户是透明的，除非客户程序依赖于组件的具体类型。
	¸ 装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得很复杂。

p93&108
使用模式最好的方式是：
	「把模式装进脑子中，然后在你的设计和已有的应用中，寻找何处可以使用这些模式。」以往是代码复用，现在是经验复用

p109&121
Factory Patten
	You’ll learn that instantiation is an activity that shouldn’t always be done in public and can often lead to coupling problems.
	直接实例化并不推荐而且对象实例化可能带来耦合问题

	通过直接new实现类的方式实例化，导致程序碎片化且不易扩展；当要修改或扩展时，必须再次打开并修改，且分散在代码的各个角落
	维护和更新风险大，并可能带来新的问题。

	“open for extension but closed for modification”  设计原则上，对扩展开放，对修改关闭

	举一个OrderPizza类，任务就是根据传入的pizza类型，返回对应的pizza对象,如果通过普通new的方式，则
	需要修改orderPizza方法，没增加一个类型，就要在里面的if分支里判断并new一个对象返回，添加或删除时都需要修改
	orderPizza方法，违反了对“修改关闭”的准则，下面进行优化：
		原来代码：
			Pizza orderPizza(String type) {
				Pizza pizza;
				if (type.equals(“cheese”)) {
					pizza = new CheesePizza();
				} else if (type.equals(“greek”) {
					pizza = new GreekPizza();
				} else if (type.equals(“pepperoni”) {
					pizza = new PepperoniPizza();
				}
				pizza.prepare();
				pizza.bake();
				pizza.cut();
				pizza.box();
				return pizza;
			}
		首先，将if判断的变化逻辑移出orderPizza方法 ：
		代码为：
			Pizza orderPizza(String type) {
				Pizza pizza;
				
				//对象创建部分逻辑被抽取(变化的部分)

				pizza.prepare();
				pizza.bake();
				pizza.cut();
				pizza.box();
				return pizza;
			}			
		
		上面创建部分，我们用一个Factory对象来完成，它专门处理创建对象细节的工作，比如命名为： SimplePizzaFactory
		这样orderPizza这个client每次需要一个pizza对象时，可以通过SimplePizzaFactory创建一个。

		工厂类代码实现如下：
			public class SimplePizzaFactory {
				public Pizza createPizza(String type) {
					Pizza pizza = null;
					if (type.equals(“cheese”)) {
						pizza = new CheesePizza();
					} else if (type.equals(“pepperoni”)) {
						pizza = new PepperoniPizza();
					} else if (type.equals(“clam”)) {
						pizza = new ClamPizza();
					} else if (type.equals(“veggie”)) {
						pizza = new VeggiePizza();
					}
					return pizza;
				}
			}
		上面这个工厂：
			1）是否将问题抛给了另一个对象，问题依旧？SimplePizzaFactory的client可能不止一个，有多个，这样如果创建过程修改了，程序只要修改SimplePizzaFactory这一处就行。
			2）有些地方用的是static声明的方法，有什么区别？static的创建方法，工厂对象无需实例化，但却无法通过继承来修改static方法的行为（静态方法都是各自独立的）。

		在PizzaStore类引入SimplePizzaFactory，如下：
			public class PizzaStore {
				SimplePizzaFactory factory;
				public PizzaStore(SimplePizzaFactory factory) {
					this.factory = factory;
				}
				public Pizza orderPizza(String type) {
					Pizza pizza;
					//用工厂方法替代，去掉了concrete instantiaton
					pizza = factory.createPizza(type);
					pizza.prepare();
					pizza.bake();
					pizza.cut();
					pizza.box();
					return pizza;
				}
				// other methods here
			}
		
				
		The Simple Factory isn’t actually a Design Pattern; it’s more of a programming idiom. But it is commonly used, so we’ll give it a Head First Pattern Honorable Mention.
		Some developers do mistake this idiom for the “Factory Pattern,” so the next time there is an awkward silence between you and another developer, you’ve got a nice topic 
		to break the ice.
		上面这个工厂模式算不上真正的工厂模式

		Think of Simple Factory as a warm up. Next, we’ll explore two heavy duty patterns that are both factories. But don’t worry, there’s more pizza to come!
		上面只是热身，后面将介绍二个重量级的工厂模式...

		上面的pizza工厂，如何适应各个地区的风俗，风味，毕竟各个地方的做法不是一致的，可能有各自的特色。
		PizzaStore - NYPizzaFactory : One franchise wants a factory that makes NY style pizzas:thin crust, tasty sauce and just a little cheese.
				 - ChicagoPizzaFactory : Another franchise wants a factory that makes Chicago style pizzas; their customers like pizzas with thick crust, rich sauce, and tons of cheese.
		
		So you test marketed the SimpleFactory idea, and what you found was that the franchises were using your factory to create pizzas, but starting to employ their own home grown
		procedures for the rest of the process: they’d bake things a little differently, they’d forget to cut the pizza and they’d use third-party boxes.
		对于创建pizza的过程不同的franchises会有不同的步骤...

p120&132
		我们需要一个framework来处理所有这些变化以及创建过程

		pizza有地区风格，地区上又有品种风格，重构上面的pizzaStore为：

			public abstract class PizzaStore {
				public Pizza orderPizza(String type) {
					Pizza pizza;
					pizza = createPizza(type);//替代工厂为自身的抽象方法
					pizza.prepare();
					pizza.bake();
					pizza.cut();
					pizza.box();
					return pizza;
				}
				abstract Pizza createPizza(String type);//工厂的调用在这里体现
			}
			PS: 各个地区的pizzaStore可以继承上面的抽象PizzaStore，并实现自己的pizza创建逻辑，上面抽象类中制作pizza的主要步骤已经定义
			好（如果不想被子类修改，可以定义为final），唯一改变的是pizza的风格
		
		Now, to take this a little further, the orderPizza() method does a lot of things with a Pizza object (like prepare, bake, cut, box), but because Pizza is abstract, orderPizza() has 
		no idea what real concrete classes are involved. In other words, it’s decoupled!
		将orderPizza过程与createPizza过程解耦


------------------------
Thursday, May 02, 2013

p131&143
	回顾工厂模式
	All factory patterns encapsulate object creation. The Factory Method Pattern encapsulates object creation by letting subclasses decide what objects to create. Let’s check out these class 
	diagrams to see who the player s are in this pattern:
		The creator classes
			abstact PizzaStroe
				abstract createPizza();
				public orderPizza();
			
			ChicagoPizzaStore extends PizzaStore
				createPizza()

			NYPizzaStore extends PizzaStore
				createPizza()

		The product classes
			NYStyleCheesePizza extends Pizza
			NYStylePepperoniPizza extends Pizza

------------------------
Friday, May 03, 2013

p134&146	
	工厂模式定义：
	The Factory Method Pattern defines an interface for creating an object, but lets subclasses decide(decided purely by the choice of the subclass that is used) 
	which class to instantiate. Factory Method lets a class defer instantiation to subclasses.
	
	Q: What’s the advantage of the Factory Method Pattern when you only have one ConcreteCreator
	A: Decoupling the implementation of the product from its use. If you add additional products or change a product’s implementation, it will not affect your Creator 
	(because the Creator is not tightly coupled to any ConcreteProduct).
	通过工厂模式将使用者与创建过程解耦，便于扩展

	Q: I’m still a bit confused about the difference between Simple Factory and Factory Method. They look very similar, except that in Factory Method, the class 
	that returns the pizza is a subclass. Can you 	explain?
	A: You’re right that the subclasses do look a lot like Simple Factory, however think of Simple Factory as a one shot deal, while with Factory Method you are 
	creating a framework that let’s the subclasses decide which implementation will be used. For example, the orderPizza() method in the Factory Method provides a
	general framework for creating pizzas that relies on a factory method to actually create the concrete classes that go into making a pizza. By subclassing the PizzaStore class, 
	you decide what concrete products go into making the pizza that orderPizza() returns.	Compare that with SimpleFactory, which gives you a way to encapsulate 
	object creation, but doesn’t give you the flexibility of the Factory Method because there is no way to vary the products you’re creating.
	此处工厂实现类的工厂方法与简单工厂看起来相似，但简单工厂不便于扩展

p139&151

	Dependency Inversion Principle （依赖反转原则）PS: 即IOC（Inversion Of Control）控制反转原则
	设计原则：
		Depend upon abstractions. Do not depend upon concrete classes.
		依赖于抽象，不依赖于具体
	
		比如，抽象工厂依赖于抽象Pizza，pizzas也只依赖抽象Pizza

	After applying the Factory Method, you’ll notice that our high-level component,the PizzaStore, and our low-level components, the pizzas, both depend on Pizza,
	the abstraction. Factory Method is not the only technique for adhering to the Dependency Inversion Principle, but it is one of the more powerful ones.
	通过工厂方法将上层组件PizzaStroe与具体的pizzas都只依赖Pizza抽象类，改变了原来的PizzaStore与pizzas依赖的问题，工厂方法不是唯一的遵循
	DI原则的技术，但却是很有效中的一个技术。

	Dependency Inversion Principle中“Inversion”的解释：
		The “inversion” in the name Dependency Inversion Principle is there because it inverts the way you typically might think about your OO design. Look at the diagram 
		on the previous page, notice that the low-level components now depend on a higher level abstraction. Likewise, the high-level component is also tied to the same abstraction. 
		So, the top-to-bottom dependency chart we drew a couple of pages back has inverted itself, with both high-level and lowlevel modules now depending on the abstraction.
		原来OO设计是，自上而下的依赖，现在PizzaStroe和pizzas都只依赖上层抽象的Pizza，即依赖的反向反转了。

	遵循DI设计准则的指导方针：
		1）No variable should hold a reference to a concrete class. 变量不保存指向具体实现类的引用，只对抽象引用，可通过工厂模式来实现
		2）No class should derive from a concrete class. 不从具体实现类中衍生子类，可基于抽象来衍生类，比如抽象类或接口
		3）No method should override an implemented method of any of its base classes. 子类不重写基类的具体方法，这些基类方法是与所有其他子类共享的

		PS: 上面只是指导方针，并不是规定，否则程序无法实现，只是应该尽量在设计时多考虑到（String类在代码中经常new，因为它一般不变，故可以这样去做
		；反之，若碰到易变的部分，就应该考虑用一些好的技术比如工厂方法来封装这些变化）
	
	继续：prepare过程，要准备原料，上面的实现每个实现类自定义原料，不仅变化大且无法控制（比如掺入劣质的原料），下面通过工厂方法提供原料集合。(
		    形象一点就是工厂配送以保证原料一致性)
		
	pizza的prepare过程，需要用到各种原料，这些原料随着pizza种类的不同而不同，故设计为抽象方法，通过原料工厂类来提供原料以解耦，Pizza不关心
	原料的实现，通过相应的工厂获取原料即可。

p156&168

抽象工厂模式定义：Abstract Factory Patten
	provides an interface for creating families of related or dependent objects without specifying their concrete classes.
	抽象工厂模式提供一个接口来创建一组相关或独立的对象而无需关心实际生产出的对象

p159&171
	抽象工厂与工厂方法的区别和联系：
	Abstract Factory: Thanks. Remember me, Abstract Factory, and use me whenever you have families of products you need to create and you want to make sure 
		your clients create products that belong together.
	Factory Method: And I’m Factory Method; use me to decouple your client code from the concrete classes you need to instantiate, or if you don’t know ahead of time 
		all the concrete classes you are going to need. To use me, just subclass me and implement my factory method!
	
	工厂方法模式：
	一个抽象产品类，可以派生出多个具体产品类。   
	一个抽象工厂类，可以派生出多个具体工厂类。   
	每个具体工厂类只能创建一个具体产品类的实例。

	抽象工厂模式：
	多个抽象产品类，每个抽象产品类可以派生出多个具体产品类。   
	一个抽象工厂类，可以派生出多个具体工厂类。   
	每个具体工厂类可以创建多个具体产品类的实例。   
	    
	区别：
	工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。   
	工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。

	所以说抽象工厂就像工厂，而工厂方法则像是工厂的一种产品生产线

------------------------
Thursday, May 09, 2013

p167&181
单例模式 Singleton Patten

待补充


------------------------
Thursday, May 16, 2013

p191&203

Chapter6 Command Patten(命令模式)
	封装调用：we’re going to encapsulate method invocation

	That’s right, by encapsulating method invocation, we can crystallize pieces of computation so that the
	object invoking the computation doesn’t need to worry about how to do things, it just uses
	our crystallized method to get it done. We can also do some wickedly smart things with
	these encapsulated method invocations, like save them away for logging or reuse them to
	implement undo in our code.
	封装方法调用，调用者无需知道调用过程；另外也可用于记录log和常用逻辑到undo实现中，比如一些ide提供的
	撤销功能。



	









#########################################################################################################
2. Java NIO
------------------------
Wednesday, April 23, 2013
p28&32

Nio实现的socket，channel，buffer，selector



#########################################################################################################
3. Servlet3.0 final Specification

------------------------
Wednesday, April 24, 2013
p2
servlet处理简单流程

The following is a typical sequence of events:
	1) A client (e.g., a Web browser) accesses a Web server and makes an HTTP request.
	2) The request is received by the Web server and handed off to the servlet container.
	The servlet container can be running in the same process as the host Web server,
	in a different process on the same host, or on a different host from the Web server
	for which it processes requests.
	3) The servlet container determines which servlet to invoke based on the
	configuration of its servlets, and calls it with objects representing the request and
	response.
	4) The servlet uses the request object to find out who the remote user is, what HTTP
	POST parameters may have been sent as part of this request, and other relevant
	data. The servlet performs whatever logic it was programmed with, and generates
	data to send back to the client. It sends this data back to the client via the
	response object.
	5) Once the servlet has finished processing the request, the servlet container ensures
	that the response is properly flushed, and returns control back to the host Web
	server.
	


#########################################################################################################
4. Java_Concurrency_in_Practice


#########################################################################################################
5. hibernate in action (GAVIN KING @2005)

------------------------
Monday, May 06, 2013

p7&30
	1.2 The paradigm mismatch	Domain模型与关系模型的不对称

#########################################################################################################
6. hibernate3源码
	Session的概念，如何创建的，和SessionFactory的关系？	      参考文档
		session只是hibernate框架自己设计的一个接口，用于实现一级缓存？具体的sql执行还是通过ConnectionManager来取到jdbc Connection来执行，
		用上数据库连接池来优化，而且是线程安全的。

	SessionFactory需要保证线程安全，并支持高并发，它会被多个线程共享，看其实现类的doc也有说明


#########################################################################################################
7. Ant review
	
------------------------
2013年5月6日

	from: Agile java development with spring ,hibernate and eclipse


p92	part2-chapter4-ant

	- Ant常用target
		"ant -p" to get the list of available targets.

	- Ant简单介绍

	1) basic build.xml
		<?xml version="1.0"?>
		<project name="HelloTest" default="printmessage">
			<target name="printmessage">
				<echo message="Hello world"/>
			</target>
		</project>

		#ant
		Buildfile: E:\workspace\testant\build.xml

		printmessage:
		     [echo] Hello world

		BUILD SUCCESSFUL
		Total time: 1 second		
	2) 属性配置
		<property name="appname" value="timex" />
		<property name="lib.dir" value="lib" />
		<property name="war.dir" value="build/timex" />
		<property name="war.file" value="${dist.dir}/${appname}.war" />
		<property name="webinf.dir" value="${war.dir}/WEB-INF" />
	3) 设置classpath，文件为lib下的所有jar和WEB-INF/classes下编译后的class文件
		<path id="master-classpath" description="Master CLASSPATH for this script">
			<fileset dir="${lib.dir}">
				<include name="*.jar" />
			</fileset>
			<pathelement location="build/timex/WEB-INF/classes/" />
		</path>
	4) 定义一些初始化target目标，供其他target执行前执行，它们依赖这些初始化target
		<target name="init" description="Setup for build script">
			<mkdir dir="${class.dir}" />
			<mkdir dir="${libs.dir}" />
			<mkdir dir="${jsp.dir}" />
		</target>		
	5) 现在开始说下compile target
		<target name="compile" description="Compiles .java files to WAR directory">
			<javac srcdir="${src.dir}" destdir="${class.dir}" debug="true"	failonerror="true" classpathref="master-classpath" />
		</target>	
	6) 打war包，涉及Ant Type名词,此处用到war task和fileset element
		<war destfile="${war.file}" webxml="${src.dir}/conf/web.xml">
			<fileset dir="${war.dir}">
				<include name="**/*.*" />
				<exclude name="**/web.xml" />
				<exclude name="**/test/*.class" />
				<exclude name="**/*mock*.jar" />
			</fileset>
		</war>
		
		其他一些常用的target，有deploy（部署war包），clean（删除目标目录的文件）和test
	
	- Ant task的类别
		1）打包类的task，比如war
		2）编译类的task，比如javac
		3）文件操作类的task，比如copy，delete，move等
		4）其他各种tasks，比如echo task
		5）属性类task用来设置内部环境变量
		其他一些值得去发掘的内置task
		6）Audit/coverage tasks
		7）Deployment tasks
		8）Documentation tasks
		9）Execution tasks
		10）Mail tasks
		11）Preprocess tasks
		12）Property tasks
		13）Remote tasks
	
	- ivy
		1）The ivy.xml file（用于配置本项目对其他库的依赖）
			This file is used to describe the dependencies of the project on other libraries.
			Here is the sample:
			<ivy-module version="2.0">
			    <info organisation="org.apache" module="hello-ivy"/>
			    <dependencies>
				<dependency org="commons-lang" name="commons-lang" rev="2.0"/>
				<dependency org="commons-cli" name="commons-cli" rev="1.0"/>
			    </dependencies>
			</ivy-module>
				@The root element ivy-module, with the version attribute used to tell Ivy which version of Ivy this file uses. 
				@info tag, which is used to give information about the module for which we are defining dependencies
				@the dependencies section lets you define dependencies. Here this module depends on two libraries: commons-lang and commons-cli. As you can see, we use the org 
				and name attributes to define the organization and module name of the dependencies we need. The rev attribute is used to specify the version of the module you depend on.  

				要确认所依赖的包的属性配置，由于ivy默认采用maven2库，可以到mvnrepository.com查询所需的module信息。具体见下面说明：

				<dependency>
					<groupId>commons-lang</groupId>
					<artifactId>commons-lang</artifactId>
					<version>2.0</version>
				</dependency>

				To convert this into an Ivy dependency declaration, all you have to do is use the groupId as organization, the artifactId as module name, and the version as revision. 
				Maven2库中module定义的groupId作为ivy依赖中的organization、artifactId为name、version为revision

				ivy.xml的其他细节见：${IVY_HOME}/doc/ivyfile.html

				
		2）The build.xml file
			定义各种target，下面是关于ivy定义部分：
			<project xmlns:ivy="antlib:org.apache.ivy.ant" name="hello-ivy" default="run">
				...
				<!-- ================================= 
				  target: resolve              
				 ================================= -->
				<target name="resolve" description="--> retrieve dependencies with ivy">
					<ivy:retrieve />
				</target>
			</project>

			PS: 如果ivy已经正确安装，我们只需要在ant配置文件中定义一个命名空间（xmlns:ivy="antlib:org.apache.ivy.ant"），这样ivy的所有ant task都能使用；此处，
			对于<ivy:retrieve />没有配置其他属性，将采用默认配置并需找ivy.xml文件作为依赖定义。
		
		3）Running the project
			enter the hello-ivy example directory.
			run ant
		
		ivy下载依赖库，默认缓存在用户目录的.ivy2/cache下，然后拷贝到项目默认库目录: lib目录 (也可在retrieve task中配置patten属性来自由的定义).
		可通过report target生成项目模块依赖情况。
		
		其他：
		As you can see, using Ivy to resolve dependencies stored in the maven 2 repository is extremely easy. Now you can go on with the next tutorials to learn more about 
		how to use module configurations which is a very powerful Ivy specific feature. Other tutorials are also available where you will learn how to use Ivy settings to leverage 
		a possibly complex enterprise repository. It may also be a good time to start reading the reference documentation, and especially the introduction material which gives 
		a good overview of Ivy. The best practices page is also a must read to start thinking about how to use Ant+Ivy to build a clean and robust build system.


#########################################################################################################
8. Thinking in Java

------------------------
Monday, May 13, 2013
	D.3提速方法：
	■字串的开销：字串连接运算符+看似简单，但实际需要消耗大量系统资源。编译器可高效地连接字串，但变
	量字串却要求可观的处理器时间。例如，假设s 和t 是字串变量：
	System.out.println("heading" + s + "trailer" + t);
	上述语句要求新建一个StringBuffer（字串缓冲），追加自变量，然后用toString()将结果转换回一个字
	串。因此，无论磁盘空间还是处理器时间，都会受到严重消耗。若准备追加多个字串，则可考虑直接使用一
	个字串缓冲——特别是能在一个循环里重复利用它的时候。通过在每次循环里禁止新建一个字串缓冲，可节
	省980 单位的对象创建时间（如前所述）。利用substring()以及其他字串方法，可进一步地改善性能。如
	果可行，字符数组的速度甚至能够更快。也要注意由于同步的关系，所以StringTokenizer 会造成较大的开
	销。
	■同步：在JDK 解释器中，调用同步方法通常会比调用不同步方法慢10 倍。经JIT 编译器处理后，这一性能
	上的差距提升到50 到100 倍（注意前表总结的时间显示出要慢97 倍）。所以要尽可能避免使用同步方法—
	—若不能避免，方法的同步也要比代码块的同步稍快一些。
	■重复利用对象：要花很长的时间来新建一个对象（根据前表总结的时间，对象的新建时间是赋值时间的
	980 倍，而新建一个小数组的时间是赋值时间的3100 倍）。因此，最明智的做法是保存和更新老对象的字
	段，而不是创建一个新对象。例如，不要在自己的paint()方法中新建一个Font 对象。相反，应将其声明成
	实例对象，再初始化一次。在这以后，可在paint()里需要的时候随时进行更新。参见Bentley 编著的《编
	程拾贝》，p.81[15]。
	■异常：只有在不正常的情况下，才应放弃异常处理模块。什么才叫“不正常”呢？这通常是指程序遇到了
	问题，而这一般是不愿见到的，所以性能不再成为优先考虑的目标。进行优化时，将小的“try-catch”块合
	并到一起。由于这些块将代码分割成小的、各自独立的片断，所以会妨碍编译器进行优化。另一方面，若过
	份热衷于删除异常处理模块，也可能造成代码健壮程度的下降。
	■散列处理：首先，Java 1.0 和1.1 的标准“散列表”（Hashtable）类需要造型以及特别消耗系统资源的
	同步处理（570 单位的赋值时间）。其次，早期的JDK 库不能自动决定最佳的表格尺寸。最后，散列函数应
	针对实际使用项（Key）的特征设计。考虑到所有这些原因，我们可特别设计一个散列类，令其与特定的应用
	程序配合，从而改善常规散列表的性能。注意Java 1.2 集合库的散列映射（HashMap）具有更大的灵活性，
	而且不会自动同步。
	■方法内嵌：只有在方法属于final（最终）、private（专用）或static（静态）的情况下，Java 编译器
	才能内嵌这个方法。而且某些情况下，还要求它绝对不可以有局部变量。若代码花大量时间调用一个不含上
	述任何属性的方法，那么请考虑为其编写一个“final”版本。
	■I/O：应尽可能使用缓冲。否则，最终也许就是一次仅输入／输出一个字节的恶果。注意JDK 1.0 的I/O 类
	采用了大量同步措施，所以若使用象readFully()这样的一个“大批量”调用，然后由自己解释数据，就可
	获得更佳的性能。也要注意Java 1.1 的“reader”和“writer”类已针对性能进行了优化。
	■造型和实例：造型会耗去2 到200 个单位的赋值时间。开销更大的甚至要求上溯继承（遗传）结构。其他
	682
	高代价的操作会损失和恢复更低层结构的能力。
	■

#########################################################################################################
9. JavaSE 6 Tutorial JDK自带说明

------------------------
Wednesday, May 15, 2013

p file:///D:/Ref/java/Java%20tutorial/essential/concurrency/procthread.html	
	■ Concurrency
		并发编程的两个基本执行单元：processes and threads

		Processing time for a single core is shared among processes and threads through an OS feature called time slicing.
		
		■ Processes
		A process has a self-contained execution environment. A process generally has a complete, private set of basic run-time resources; in particular, each process has its own memory space.

		Processes are often seen as synonymous with programs or applications. However, what the user sees as a single application may in fact be a set of cooperating processes. To facilitate 
		communication between processes, most operating systems support Inter Process Communication (IPC) resources, such as pipes and sockets. IPC is used not just for communication 
		between processes on the same system, but processes on different systems.
		进程间的通信机制IPC，IPC不仅用于同一个系统内部的通信，还用于不同系统间的通信。

		Most implementations of the Java virtual machine run as a single process. A Java application can create additional processes using a ProcessBuilder object. Multiprocess applications are 
		beyond the scope of this lesson.
		大多数jvm的实现都是运行在单进程中的，java程序也可通过ProcessBuilder创建其他的进程，但不在本课程考虑之内。

		■ Threads
		Threads are sometimes called lightweight processes. Both processes and threads provide an execution environment, but creating a new thread requires fewer resources than creating a new 
		process.
		线程又被叫做轻量级进程，两者都提供可执行环境，但是创建线程的代价比进程小的多。

		Threads exist within a process — every process has at least one. Threads share the process's resources, including memory and open files. This makes for efficient, but potentially problematic, 
		communication.

		Multithreaded execution is an essential feature of the Java platform. Every application has at least one thread — or several, if you count "system" threads that do things like memory management 
		and signal handling. But from the application programmer's point of view, you start with just one thread, called the main thread. This thread has the ability to create additional threads, as we'll 
		demonstrate in the next section.
		多线程执行时java平台提供一个核心特性。...

			■ Thread Objects
			Each thread is associated with an instance of the class Thread. There are two basic strategies for using Thread objects to create a concurrent application.
			每个线程都与Thread类的一个实例相关联。有下面两种方式创建并发程序：
			
			1) To directly control thread creation and management, simply instantiate Thread each time the application needs to initiate an asynchronous task.
			直接创建线程并操作

			2) To abstract thread management from the rest of your application, pass the application's tasks to an executor.
			从程序中抽象出线程管理，将这些任务交给executor去处理。

			This section documents the use of Thread objects. Executors are discussed with other high-level concurrency objects.
			Executors处理部分见下文high-level concurrency objects部分。

			■ Defining and Starting a Thread
			Provide a Runnable object.
			or Subclass Thread

			■ Pausing Execution with Sleep
			Thread.sleep causes the current thread to suspend execution for a specified period. This is an efficient means of making processor time available to the other threads of an application 
			or other applications that might be running on a computer system. The sleep method can also be used for pacing, as shown in the example that follows, and waiting for another thread 
			with duties that are understood to have time requirements, as with the SimpleThreads example in a later section.

			Two overloaded versions of sleep are provided: one that specifies the sleep time to the millisecond and one that specifies the sleep time to the nanosecond. However, these sleep times 
			are not guaranteed to be precise, because they are limited by the facilities provided by the underlying OS. Also, the sleep period can be terminated by interrupts, as we'll see in a later 
			section. In any case, you cannot assume that invoking sleep will suspend the thread for precisely the time period specified.
			Sleep的时间不保证精确，依赖于底层OS时钟和调度的精确性(subject to the precision and accuracy of system timers and schedulers);任何情况，不应该假定在调用sleep后，
			会暂停线程直到指定的精确时间后再重新执行（如：sleep时间到了但系统调度没调度到则还需等待执行）。程序不应该将逻辑建立于精确的sleep时间上。

			■ Interrupts
			An interrupt is an indication to a thread that it should stop what it is doing and do something else. It's up to the programmer to decide exactly how a thread responds to an interrupt, 
			but it is very common for the thread to terminate. This is the usage emphasized in this lesson.
			调用interrupt，告诉线程停下当前的工作，由开发人员决定要做什么，一般都是关闭当前线程。
				■ Supporting Interruption	     ？
				How does a thread support its own interruption? This depends on what it's currently doing. If the thread is frequently invoking methods that throw InterruptedException, 
				it simply returns from the run method after it catches that exception. For example, suppose the central message loop in the SleepMessages example were in the run method 
				of a thread's Runnable object. Then it might be modified as follows to support interrupts:

				for (int i = 0; i < importantInfo.length; i++) {
				    //Pause for 4 seconds
				    try {
					Thread.sleep(4000);
				    } catch (InterruptedException e) {
					//We've been interrupted: no more messages.
					return;
				    }
				    //Print a message
				    System.out.println(importantInfo[i]);
				}
				Many methods that throw InterruptedException, such as sleep, are designed to cancel their current operation and return immediately when an interrupt is received.
				What if a thread goes a long time without invoking a method that throws InterruptedException? Then it must periodically invoke Thread.interrupted, which returns 
				true if an interrupt has been received. For example:

				for (int i = 0; i < inputs.length; i++) {
				    heavyCrunch(inputs[i]);
				    if (Thread.interrupted()) {
					//We've been interrupted: no more crunching.
					return;
				    }
				}
				In this simple example, the code simply tests for the interrupt and exits the thread if one has been received. In more complex applications, it might make more sense to 
				throw an InterruptedException:
				if (Thread.interrupted()) {
				    throw new InterruptedException();
				}
				This allows interrupt handling code to be centralized in a catch clause.

				■ The Interrupt Status Flag	  interrupt状态标志
				The interrupt mechanism is implemented using an internal flag known as the interrupt status. Invoking Thread.interrupt sets this flag. When a thread checks for an interrupt by invoking the 
				static method Thread.interrupted, interrupt status is cleared. The non-static isInterrupted method, which is used by one thread to query the interrupt status of another, does not change the 
				interrupt status flag.
				
				By convention, any method that exits by throwing an InterruptedException clears interrupt status when it does so. However, it's always possible that interrupt status will immediately be 
				set again, by another thread invoking interrupt.

			■ Joins
			The join method allows one thread to wait for the completion of another. If t is a Thread object whose thread is currently executing,t.join();
			causes the current thread to pause execution until t's thread terminates. Overloads of join allow the programmer to specify a waiting period. However, as with sleep, join is dependent on the OS 
			for timing, so you should not assume that join will wait exactly as long as you specify.

			Like sleep, join responds to an interrupt by exiting with an InterruptedException.

			TODO: More...

------------------------
Tuesday, May 21, 2013
		
		■ High Level Concurrency Objects
		 This is especially true for massively concurrent applications that fully exploit today's multiprocessor and multi-core systems.
		 适用于高并发程序，充分挖掘当前多CPU多核心的操作系统的性能。

		 In this section we'll look at some of the high-level concurrency features introduced with version 5.0 of the Java platform. Most of these features are implemented in 
		 the new java.util.concurrent packages. There are also new concurrent data structures in the Java Collections Framework.

		 1) Lock 
		 objects support locking idioms that simplify many concurrent applications.

		 2) Executors 
		 define a high-level API for launching and managing threads. Executor implementations provided by java.util.concurrent provide thread pool management suitable for large-scale applications.

		 3) Concurrent 
		 collections make it easier to manage large collections of data, and can greatly reduce the need for synchronization.

		 4) Atomic 
		 variables have features that minimize synchronization and help avoid memory consistency errors.

		 5) ThreadLocalRandom 
		 (in JDK 7) provides efficient generation of pseudorandom numbers from multiple threads.







#########################################################################################################
10. Java Network Programming 3rd edition Oreilly.Java.Network.Programming.3rd.Edition.Oct.2004
Chapter5 Threads
	老的web系统，ftp系统，每个连接一个进程，一但系统资源达到瓶颈，创建的进程数达到限制数据时，新来的连接就不会再处理

	有2种方式解决上面的问题：
	
	一是，用进程池重用进程，启动时初始化好固定数据的进程，用一个队列存放请求，进程池消费队列中的请求；缺点，进程相对系统还是重量级的
	资源，不便于横向扩展。
	
	二是，用轻量级线程（或者叫线程）来处理；缺点，编程模型复杂，线程和进程共享内存，需要控制线程间的访问