(1) increment
      对long、int或short的数据列生成自动增长主键。这种情况主要用于数据库中未把表格主键设置为自增，而又想表格主键自增时。
     此方式的实现机制为在当前应用实例中维持一个变量，以保存着当前的最大值，之后每次需要生成主键的时候将此值加1作为主键。 
     这种方式可能产生的问题是：如果当前有多个实例访问同一个数据库，那么由于各个实例各自维护主键状态，不同实例可能生成同样的主键，从而造成主键重复异常。因此，如果同一数据库有多个实例（也就是并发量大的）访问，此方式必须避免使用。 只有在没有其他进程往同一张表中插入数据时才能使用。但是它的生成标识符机制不依赖于底层数据库系统，所以他适合于所有的数据库系统。
  （2）identity
     对如SQL Server,MySQL等支持自动增长列的数据库，如果数据列的类型是long、short或int，可使用该主键生成器来生成自动增长主键。但由于它依赖于底层数据库，所以要求底层数据系统必须支持自动增长字段类型。而且它需要底层数据库把主键定义为自动增长字段类型。
    (3)native
     该生成器依据底层数据库对自动生成标识符的支持能力，来选择使用identity、sequence或hilo标识符生成器。能自动判断底层数据库提供的生成标识符的机制。
     适合于跨数据库平台开发，即同一个Hibernate应用需要连接多种数据库系统的场合。
    (4)sequence
    对如Oracle，DB2等支持Sequence的数据库，如果数据列的类型是long,short或int，可使用该主键生成器生成自动增长主键。    该标识符生成器利用底层数据库提供的序列来生成标识符。
<generator class="sequence">
       <param name="sequence">tester_id_seq</param>
</generator>
在生成的DDL代码中会生成：
create sequence tester_id_seq;
注：MySQL不支持sequence。
当Hibernate在持久化一个SequenceTester对象时，先从底层数据库的tester_id_seq序列中获得一个唯一的序列号，再把它作为主键值。注意：要求底层数据库必须支持序列，包括：Oracle、DB2、SAP DB、PostgreSQL等。

自动生成的意思是你指定一个序列给hibernate,hibernate会找到序列的下一个值给你的主键 
比如你创建一个序列CREATE SEQUENCE user_id_seq INCREMENT BY 1 -- 每次加1

START WITH 1：从1开始计数； NOMAXVALUE：不设置最大值； NOCYCLE：一直累加，不循环 ；NOCACHE ：不建缓冲区；然后在映射文件里面把这个序列指定给hibernate,让序列与某个主键相关联,然后hibernate就知道如何自增了!! 
<id name="id" column="USER_ID" > 
<generator class="sequence"> 
<param name="sequence">user_id_seq</param> 
</generator> 
</id> 


    （5）uuid.hex 
      由Hibernate基于128 位唯一值产生算法生成16 进制数值（编码后以长度32 的字符串表示）作为主键。 
    （6）uuid.string 
      与uuid.hex 类似，只是生成的主键未进行编码（长度16）。在某些数据库中可能出现问题（如PostgreSQL）

     （7） Assigned 
     主键由外部程序负责生成，无需Hibernate参与。

      
    （8）hilo标识符生成器

     hilo标识符生成器由HIbernate按照一种high/low算法来生成标识符，他从数据库的特定表字段中获取high值
    <id name="id" type="long" column="ID">
    <generator class="hilo">
                <param name="table">hi_value</param>
                <param name="column">next_value</param>
                <param name="max_lo">100</param>
        </generator>
    </id>
上例：high值放在hi_value表的next_value字段中
Hibernate 在持久化一个对象时，需要读取并修改hi_value表中的next_value值。这段操作在单独的事务中处理。当save时，不使用当前 session对象的当前数据库联接和事务，而是在一个新的数据库连接中创建新事务，然后访问hi_value表。

适用范围：

-适用于所有的数据库系统。
-OID必须为long、int或short型，如果定义为byte类型，会抛出异常。
-只能在一个数据库中保证标识符唯一
- 当用户为Hibernate自行提供数据库联接，或者Hibernate通过JTA，从应用服务器的数据源获得数据库联接时无法适用hilo,因为这样不能保证hilo在新的数据库连接的事务中访问hi_value表。在这种情况下，如果数据库系统支持序列，可以适用seqhilo生成器。对于支持序列的数据库系统，可以适用seqhilo,它从序列中获取high值。





     一般而言，利用uuid.hex方式生成主键将提供最好的性能和数据库平台适应性。

        另外由于常用的数据库，如Oracle、DB2、SQLServer、MySql 等，都提供了易用的主键生成机制（Auto-Increase 字段或者Sequence）。我们可以在数据库提供的主键生成机制上，采用generator-class=native的主键生成方式。不过值得注意的是，一些数据库提供的主键生成机制在效率上未必最佳，大量并发insert数据时可能会引起表之间的互锁。数据库提供的主键生成机制，往往是通过在一个内部表中保存当前主键状态（如对于自增型主键而言，此内部表中就维护着当前的最大值和递增量），之后每次插入数据会读取这个最大值，然后加上递增量作为新记录的主键，之后再把这个新的最大值更新回内部表中，这样，一次Insert操作可能导致数据库内部多次表读写操作，同时伴随的还有数据的加锁解锁操作，这对性能产生了较大影响。

因此，对于并发Insert要求较高的系统，推荐采用uuid.hex 作为主键生成机制。
      
      如果需要采用定制的主键产生算法，则在此处配置主键生成器，主键生成器必须实现  net.sf.hibernate.id.IdentifierGenerator  接口。

     例如：我们可以写一个自己的主键生成类MyIdentifierGenerator  并且实现public Serializable generate(SessionImplementor session, Object object) 
 throws HibernateException;方法，代码可能是这个样子：
public class MyIncrementGenerator implements IdentifierGenerator, Configurable {
    
    private static final Log log = LogFactory.getLog(MyIncrementGenerator.class);
    
    private long next;
    private String sql;
    
    public synchronized Serializable generate(SessionImplementor session, Object object)
        throws SQLException, HibernateException {
        if (sql!=null) {
            //获得下一个主键的编号，可以自己定义
            getNext( session.connection() );
        }
       return String.valueOf(next);
    }

    public void configure(Type type, Properties params, Dialect d)
        throws MappingException {
        
        String table = params.getProperty("table");
        if (table==null) table = params.getProperty(PersistentIdentifierGenerator.TABLE);
        String column = params.getProperty("column");
        if (column==null) column = params.getProperty(PersistentIdentifierGenerator.PK);
        String schema = params.getProperty(PersistentIdentifierGenerator.SCHEMA);
        returnClass = type.getReturnedClass();
        
        sql = "select max(to_number(" + column + ")) from " + ( schema==null ? table : schema + '.' + table );
    }

    private void getNext(Connection conn) throws SQLException {
        PreparedStatement st = conn.prepareStatement(sql);
        ResultSet rs = null;
        try {
            rs = st.executeQuery();
            if ( rs.next() ) {
                next = rs.getLong(1) + 1;
                if ( rs.wasNull() ) next = 1;
            }
            else {    
                next = 1;
            }
            sql=null;
            log.debug("first free id: " + next);
        }
        finally {
            if (rs!=null) rs.close();
            st.close();
        }
    }
然后再需要使用我们自定义的主键生成器构造主键的数据库对象所对应的.XML文件中可以这样写：

<id name="uniqueid" column="UNIQUEID" type="string">
     <generator class="com.core.persistence.MyIncrementGenerator"/>
</id>